{"version":3,"sources":["components/mainPage.js","components/Header.js","components/Footer.js","components/Board.js","components/GamePage.js","App.js","reportWebVitals.js","index.js"],"names":["pageChange","changeTextTimeOut","useStyles","makeStyles","mainContainer","backgroundColor","height","innerMainContainer","position","left","top","width","transform","padding","playButton","nickNameText","margin","List","MatchmakingList","Progress","marginRight","Paper","maxWidth","marginTop","MainPage","classes","history","useHistory","useState","status","setStatus","textFieldBool","setTextFieldBool","infoText","setInfoText","Container","className","elevation","ListItem","style","Typography","align","Divider","onSubmit","e","preventDefault","setTimeout","push","pathname","clearTimeout","autoComplete","TextField","disabled","required","id","label","variant","fullWidth","Button","type","color","startIcon","size","CircularProgress","minHeight","Otsikko","Header","paddingTop","Footer","emptyString","emptyBoard","tableCell","border","table","tableCellButton","turnNumber","Board","board","setBoard","turn","switchTurn","gameStatus","setGameStatus","winningCells","setWinningCells","open","setOpen","useEffect","resetGame","handleClose","winCheck","boardCopy","rowIndex","columnIndex","winner","Table","TableRow","TableCell","colSpan","map","row","index","cell","index2","onClick","rowIndx","columnIndx","boardKopio","length","setCellState","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","App","basename","window","location","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb871ff1.chunk.js","sourcesContent":["\r\nimport \"@fontsource/roboto/500.css\"\r\nimport {Container, Typography, makeStyles, TextField, Button, List, ListItem, Divider, ListItemIcon, Paper} from '@material-ui/core/';\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport OndemandVideoIcon from '@material-ui/icons/OndemandVideo';\r\nimport PeopleOutlineIcon from '@material-ui/icons/PeopleOutline';\r\nimport {useState} from 'react'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    mainContainer: {\r\n        backgroundColor: \"cornflowerBlue\",\r\n        height: \"1100px\",\r\n    },\r\n    innerMainContainer: {\r\n      \r\n      position: 'absolute', \r\n      left: '50%', \r\n      top: '50%',\r\n      \r\n      width: \"400px\",\r\n      transform: 'translate(-50%, -50%)',\r\n      padding: \"0px\"\r\n    },\r\n    playButton: {\r\n        height: \"100px%\",\r\n    },\r\n    nickNameText: {\r\n        height: \"50%\",\r\n        margin: \"0px\"\r\n    },\r\n    List: {\r\n        width: \"300px\"\r\n    },\r\n    MatchmakingList:{\r\n        height: \"50px\",\r\n        padding: \"0px\"\r\n    },\r\n    Progress: {\r\n        marginRight: \"15px\"\r\n    },\r\n    Paper: {\r\n        maxWidth: \"300px\",\r\n        marginTop: \"15px\"\r\n    }\r\n\r\n  }))\r\n\r\nlet pageChange;\r\nlet changeTextTimeOut;\r\n\r\nexport default function MainPage(){\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    //0 = default, 1 = in-queue\r\n    const [status, setStatus] = useState(0);\r\n    const [textFieldBool, setTextFieldBool] = useState(false);\r\n    const [infoText, setInfoText] = useState(\"Matchmaking...\")\r\n \r\n    \r\n\r\n    const formHandler = (e) => {\r\n        e.preventDefault()\r\n        //console.log(\"formhandler\")\r\n\r\n        \r\n\r\n        //0 = default, 1 = in-queue\r\n        if(status == 0){\r\n            setStatus(1);\r\n            //console.log(\"statusss:\", status)\r\n            setTextFieldBool(true);\r\n            changeTextTimeOut = setTimeout(function(){setInfoText(\"Match found. Connecting...\")}, 1500)\r\n            pageChange = setTimeout(function(){\r\n            history.push({pathname: '/game'})}, 3000);\r\n            \r\n\r\n        //0 = default, 1 = in-queue\r\n        } else if(status == 1){\r\n            setStatus(0);\r\n            setTextFieldBool(false);\r\n            clearTimeout(pageChange)\r\n            clearTimeout(changeTextTimeOut)\r\n            setInfoText(\"Matchmaking...\")\r\n           \r\n        }\r\n        \r\n    }\r\n    \r\n    return(\r\n        <Container className={classes.mainContainer}>\r\n            <Paper elevation={3} className={classes.Paper}> \r\n            <List className={classes.List} >\r\n                <ListItem >       \r\n                    <OndemandVideoIcon style={{padding: \"2px\"}}/>    \r\n                    <Typography align=\"center\"> <b> 7 </b>  games in play </Typography>\r\n                </ListItem>\r\n                <Divider />\r\n            <ListItem>\r\n                 <PeopleIcon style={{padding: \"2px\"}}/>\r\n                <Typography align=\"center\"> <b> 4 </b> players players in queue </Typography>\r\n            </ListItem>\r\n            <Divider />\r\n            <ListItem>\r\n                <PeopleOutlineIcon style={{padding: \"2px\"}}/>\r\n                <Typography align=\"center\"> <b> 3 </b> players players in lobby </Typography>\r\n            </ListItem>\r\n            </List>\r\n            </Paper>\r\n        \r\n            <Container className={classes.innerMainContainer}>\r\n        \r\n        <form onSubmit={formHandler} autoComplete=\"off\"> \r\n            <TextField disabled={textFieldBool} className={classes.nickNameText} required id=\"outlined-basic\" label=\"Enter your nickname\" variant=\"outlined\"\r\n             fullWidth={true} />\r\n            {status === 0 \r\n            ?  <Button type=\"submit\" className={classes.playButton} variant=\"contained\" color=\"primary\" startIcon={<PlayCircleFilledIcon/>}  fullWidth={true}  size='large' > \r\n            <Typography>  PLAY </Typography></Button>\r\n            : <Button type=\"submit\" className={classes.playButton} variant=\"contained\" startIcon={<CancelIcon/>}  fullWidth={true}  size='large' > \r\n            <Typography>  CANCEL MATCHMAKING </Typography></Button>}\r\n           \r\n        </form>\r\n            <Container style={{padding: \"0px\"}}> \r\n            <List className={classes.MatchmakingList}>\r\n            {status === 0 \r\n            ? <ListItem> </ListItem>\r\n              :  \r\n                    <ListItem className={classes.MatchmakingList}>\r\n                    <CircularProgress color=\"secondary\" size={20} className={classes.Progress}/> \r\n                    <Typography> {infoText} </Typography>\r\n                    </ListItem>\r\n                 }\r\n                </List>\r\n            </Container>\r\n            \r\n        </Container>\r\n        </Container>\r\n        \r\n\r\n\r\n    )\r\n}","import \"@fontsource/roboto/500.css\"\r\nimport {Container, Typography, makeStyles} from '@material-ui/core/';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    mainContainer: {\r\n      backgroundColor: \"#4251af\",\r\n      minHeight: \"100px\",\r\n    \r\n    },\r\n    Otsikko: {\r\n        color: \"white\",\r\n    }\r\n  }))\r\n\r\nexport default function Header(){\r\n    const classes = useStyles();\r\n    return(\r\n        <Container className={classes.mainContainer} align=\"center\">\r\n            <Typography className={classes.Otsikko}  variant=\"h3\"> Otto's Tic-tac-toe Game</Typography>\r\n            <Typography> A Multiplayer tic-tac-toe game! </Typography>\r\n        </Container>\r\n\r\n\r\n    )\r\n}","import \"@fontsource/roboto/500.css\"\r\nimport {Container, Typography, makeStyles} from '@material-ui/core/';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    mainContainer: {\r\n      backgroundColor: \"#4251af\",\r\n      minHeight: \"100px\",\r\n      paddingTop: \"20px\"\r\n    },\r\n  }))\r\n\r\nexport default function Footer(){\r\n    const classes = useStyles();\r\n    return(\r\n        <Container className={classes.mainContainer} align=\"center\">\r\n            <Typography> © Otto Österberg 2021 </Typography>\r\n           \r\n        </Container>\r\n\r\n\r\n    )\r\n}","import {useState, useEffect} from 'react'\r\n\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\n\r\nimport {Table, TableRow, TableCell, Button, makeStyles, Typography, Container, Dialog, DialogContent, DialogContentText, \r\nDialogActions, DialogTitle} from '@material-ui/core'\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nconst emptyString = ''\r\nconst emptyBoard = [[emptyString, emptyString, emptyString], [emptyString, emptyString, emptyString], [emptyString, emptyString, emptyString]]\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    mainContainer: {\r\n        backgroundColor: \"cornflowerBlue\",\r\n        height: \"1100px\",\r\n    },\r\n    tableCell: {\r\n        padding: \"0px\",\r\n        height: \"200px\",\r\n        border: \"1px solid black\",\r\n\r\n    }, \r\n    table: {\r\n        width: \"600px\",\r\n        height: \"600px\"\r\n    },\r\n    tableCellButton: {\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n    },\r\n\r\n\r\n}))\r\n\r\n\r\nlet turnNumber = 0;\r\n\r\nexport default function Board(){\r\n\r\n    const [board, setBoard] = useState(emptyBoard)\r\n    const [turn, switchTurn] = useState(0);\r\n    const [gameStatus, setGameStatus] = useState(1);\r\n    const [winningCells, setWinningCells] = useState([-1, -1, -1, -1, -1, -1]);\r\n\r\n    const colored = [0, 0, 1, 1, 2, 2];\r\n    \r\n\r\n    //DialogState\r\n    const [open, setOpen] = useState(false);\r\n\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        resetGame();\r\n        turnNumber = 0;\r\n\r\n    }, [])\r\n\r\n    //console.log(\"turnnumber: \", turnNumber)\r\n\r\n    //Dialogopen\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n      };\r\n    //DialogClose\r\n      const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n\r\n\r\n    const returnMain = () => {\r\n        //console.log(\"returning to main lobby!\");\r\n        resetGame();\r\n        history.push({pathname: '/'})\r\n\r\n    }\r\n\r\n    const resetGame = () => {\r\n        //console.log(\"resetting game!\")\r\n        setBoard([[emptyString, emptyString, emptyString], [emptyString, emptyString, emptyString], [emptyString, emptyString, emptyString]])\r\n        switchTurn(0);\r\n\r\n        //1 == no winner yet, 2 == x wins, 3 == o wins, \r\n        setGameStatus(1);\r\n        \r\n        setWinningCells([-1, -1, -1, -1, -1, -1])\r\n\r\n        turnNumber = 0;\r\n\r\n    }\r\n\r\n    const winCheck = (boardCopy, rowIndex, columnIndex) => {\r\n\r\n        let winner = '';\r\n        \r\n    \r\n            //winCheck row\r\n            if(boardCopy[rowIndex][columnIndex] === boardCopy[rowIndex][0] && boardCopy[rowIndex][columnIndex] === boardCopy[rowIndex][1]\r\n              && boardCopy[rowIndex][columnIndex] === boardCopy[rowIndex][2])\r\n              {//console.log(\"rivillä kolme peräkkäin!\")\r\n              winner = boardCopy[rowIndex][columnIndex];\r\n    \r\n            \r\n              setWinningCells([rowIndex, 0, rowIndex, 1, rowIndex, 2])}\r\n             \r\n            //winCheck column\r\n            else if(boardCopy[rowIndex][columnIndex] === boardCopy[0][columnIndex] && boardCopy[rowIndex][columnIndex] === boardCopy[1][columnIndex]\r\n              && boardCopy[rowIndex][columnIndex] === boardCopy[2][columnIndex]){{\r\n                //console.log(\"kolumnissa kolme peräkkäin!\")\r\n                winner = boardCopy[rowIndex][columnIndex];\r\n                setWinningCells([0, columnIndex, 1, columnIndex, 2, columnIndex])}\r\n                \r\n              }\r\n            //winCheck diagonal:\r\n            else if(boardCopy[0][0] === boardCopy[rowIndex][columnIndex] && boardCopy[1][1] === boardCopy[rowIndex][columnIndex] && boardCopy[2][2] === boardCopy[rowIndex][columnIndex])\r\n            {//console.log(\"diagonal win!\")\r\n            winner = boardCopy[rowIndex][columnIndex];\r\n            setWinningCells([0, 0, 1, 1, 2, 2])}\r\n          \r\n    \r\n            else if(boardCopy[0][2] === boardCopy[rowIndex][columnIndex] && boardCopy[1][1] === boardCopy[rowIndex][columnIndex] && boardCopy[2][0] === boardCopy[rowIndex][columnIndex])\r\n            {//console.log(\"diagonal win!\")\r\n            winner = boardCopy[rowIndex][columnIndex];\r\n            setWinningCells([0, 2, 1, 1, 2, 0])\r\n          }\r\n            \r\n\r\n          if(winner === \"\" && turnNumber == 9){\r\n              //console.log(\"the game is a draw\");\r\n              winner = 'D';\r\n              setGameStatus(4);\r\n          }\r\n    \r\n          return winner;\r\n    \r\n    \r\n      }\r\n    \r\n      const setCellState = (rowIndx, columnIndx) => {\r\n    \r\n        if(gameStatus == 1){\r\n          let boardKopio = [...board];\r\n          if(boardKopio[rowIndx][columnIndx].length === 0){\r\n            if(turn === 0){\r\n              turnNumber++;\r\n              boardKopio[rowIndx][columnIndx] = \"X\"\r\n              winCheck(boardKopio, rowIndx, columnIndx) === 'X' ? setGameStatus(2) : //console.log(\"no winner\");\r\n              switchTurn(1)\r\n              \r\n            } else {\r\n              turnNumber++;\r\n              boardKopio[rowIndx][columnIndx] = \"O\"\r\n              winCheck(boardKopio, rowIndx, columnIndx) === 'O' ? setGameStatus(3) : //console.log(\"no winner\");\r\n              switchTurn(0)\r\n              \r\n            }\r\n          } else {\r\n            //console.log(\"ruutu jo täytetty!\")\r\n          }\r\n          //console.log(boardKopio[rowIndx][columnIndx]);\r\n          setBoard(boardKopio)\r\n    \r\n        }\r\n   \r\n      }\r\n    \r\n  \r\n      const checkGameOver = () => {\r\n    \r\n\r\n        const boardRivi1 = [...board][0]\r\n        const boardRivi2 = [...board][1]\r\n        const boardRivi3 = [...board][2]\r\n        const allCells = boardRivi1.concat(boardRivi2).concat(boardRivi3)\r\n        //console.log(allCells);\r\n        //console.log(!allCells.includes(\"\"))\r\n    \r\n      }\r\n    \r\n     \r\n\r\n\r\n    return(\r\n\r\n        <Container align=\"center\">\r\n           \r\n\r\n\r\n     \r\n  \r\n    <Table className={classes.table}>\r\n      \r\n    <TableRow> <TableCell colSpan=\"3\">  {gameStatus == 1 ? <Typography variant=\"h4\" > {turn == 0 ? <b style={{color: 'red'}}>X</b> : <b style={{color: '#4169E1'}}>O</b>}'s turn: </Typography> : <Typography variant=\"h4\"> Game over! \r\n           {gameStatus == 2 ? \" X wins!\" : \"\"} {gameStatus == 3 ? \"O wins!\" : \"\"} {gameStatus == 4 ? \"The game is a draw!\" : \"\"}</Typography>}   </TableCell> </TableRow>\r\n    {board.map((row, index) => \r\n\r\n      <TableRow>\r\n        {row.map((cell, index2) => <TableCell className={classes.tableCell} align=\"center\"> <Button className={classes.tableCellButton} style={{backgroundColor: \r\n          (winningCells[0] == index && winningCells[1] == index2)\r\n           || (winningCells[2] == index && winningCells[3] == index2)\r\n           || (winningCells[4] == index && winningCells[5] == index2)\r\n          ? 'LightGreen' : '#A8A8A8' }} onClick={() => setCellState(index, index2)}> <Typography variant=\"h2\" style={{color: board[index][index2] === \"X\" ? 'red':'#4169E1'}}> \r\n        {board[index][index2]} </Typography>  </Button>   </TableCell>) }\r\n    \r\n     </TableRow> \r\n     \r\n      \r\n\r\n      )}\r\n\r\n</Table>\r\n\r\n\r\n\r\n    <Button variant=\"contained\" color=\"primary\" onClick={resetGame} startIcon={<ReplayIcon/>}> New Game </Button>\r\n    <Button variant=\"contained\" onClick={handleClickOpen} startIcon={<ExitToAppIcon/>}> Return to Main Lobby </Button>\r\n\r\n\r\n    <Dialog open={open} onClose={handleClose}>\r\n            <DialogTitle style={{backgroundColor: \"#4251af\", color: \"white\"}}> Confirmation </DialogTitle>\r\n    <DialogContent>\r\n            <DialogContentText>\r\n                Returning to main lobby will forfeit the current game. Are you sure you want to return?\r\n            </DialogContentText>\r\n    </DialogContent>\r\n    <DialogActions>\r\n        <Button onClick={handleClose} variant=\"contained\" color=\"primary\">\r\n            Cancel\r\n        </Button>\r\n        <Button onClick={returnMain} variant=\"contained\" color=\"secondary\" autoFocus>\r\n            Return to main Lobby\r\n        </Button>       \r\n\r\n    </DialogActions>\r\n    </Dialog>\r\n            \r\n    </Container>\r\n\r\n    )\r\n}","\r\nimport \"@fontsource/roboto/500.css\"\r\nimport {Container, Typography, makeStyles, TextField, Button, List, ListItem, Divider, ListItemIcon} from '@material-ui/core/';\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport {useState} from 'react'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n\r\nimport Board from './Board'\r\n\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    mainContainer: {\r\n        backgroundColor: \"cornflowerBlue\",\r\n        height: \"1100px\",\r\n    },\r\n    innerMainContainer: {\r\n      \r\n      position: 'absolute', \r\n      left: '50%', \r\n      top: '50%',\r\n      \r\n      width: \"400px\",\r\n      transform: 'translate(-50%, -50%)',\r\n      padding: \"0px\"\r\n    },\r\n    playButton: {\r\n        height: \"100px%\",\r\n    },\r\n    nickNameText: {\r\n        height: \"50%\",\r\n        margin: \"0px\"\r\n    },\r\n    List: {\r\n        width: \"300px\"\r\n    },\r\n    MatchmakingList:{\r\n        height: \"50px\",\r\n        padding: \"0px\"\r\n    },\r\n    Progress: {\r\n        marginRight: \"15px\"\r\n    }\r\n\r\n  }))\r\n\r\nexport default function MainPage(){\r\n\r\n    const classes = useStyles();\r\n\r\n  \r\n  \r\n    \r\n    return(\r\n        <Container className={classes.mainContainer}>\r\n            <Board/>\r\n\r\n          \r\n        </Container>\r\n        \r\n\r\n\r\n    )\r\n}","import './App.css';\nimport \"@fontsource/roboto/500.css\"\nimport {Container, Typography, makeStyles} from '@material-ui/core/';\n\nimport MainPage from \"./components/mainPage\"\nimport Header from \"./components/Header\"\nimport Footer from \"./components/Footer\"\nimport GamePage from \"./components/GamePage\"\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nconst useStyles = makeStyles(() => ({\n  mainContainer: {\n    backgroundColor: \"cornflowerBlue\",\n    minHeight: \"1000px\",\n    padding: \"0px\"\n  },\n}))\n\nfunction App() {\n\n  const classes = useStyles();\n\n  return (\n    <Container className={classes.mainContainer}>\n      <Router basename={window.location.pathname || ''}>\n        <Route path=\"/\" exact>\n          <Header/>\n          <MainPage/>\n          <Footer/>\n        </Route>\n        <Route path=\"/game\" >\n          <Header/>\n          <GamePage/>\n          <Footer/>\n        </Route>\n\n      </Router>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <App />\n ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}